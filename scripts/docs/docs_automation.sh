#!/bin/bash

# =============================================================================
# SISTEMA LANCEI ESSA - AUTOMA√á√ÉO COMPLETA DA DOCUMENTA√á√ÉO  
# =============================================================================
# Descri√ß√£o: Script mestre que orquestra toda a automa√ß√£o da documenta√ß√£o
# Autor: Sistema Automatizado de Documenta√ß√£o
# Data: $(date '+%d/%m/%Y')
# Vers√£o: 1.0
# =============================================================================

set -euo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Configura√ß√µes
SCRIPTS_DIR="scripts/docs"
DOCS_DIR="docs"
LOG_FILE="$DOCS_DIR/project-management/automation-log.md"
NOTIFICATION_FILE="$DOCS_DIR/project-management/automation-alerts.json"

# Flags de controle
VALIDATE_DOCS=true
UPDATE_METRICS=true  
AUTO_VERSION=false
GENERATE_REPORTS=true
CLEAN_TEMP=true
SEND_NOTIFICATIONS=true

echo -e "${BLUE}ü§ñ SISTEMA LANCEI ESSA - AUTOMA√á√ÉO DA DOCUMENTA√á√ÉO${NC}"
echo "================================================================="
echo -e "üìÖ Executado em: ${YELLOW}$(date)${NC}"
echo -e "üìÇ Diret√≥rio: ${YELLOW}$(pwd)${NC}"
echo ""

# Fun√ß√£o para logging
log_action() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%H:%M:%S')
    
    case "$level" in
        "INFO")
            echo -e "${BLUE}‚ÑπÔ∏è  [$timestamp] $message${NC}"
            ;;
        "SUCCESS")
            echo -e "${GREEN}‚úÖ [$timestamp] $message${NC}"
            ;;
        "WARNING")
            echo -e "${YELLOW}‚ö†Ô∏è  [$timestamp] $message${NC}"
            ;;
        "ERROR")
            echo -e "${RED}‚ùå [$timestamp] $message${NC}"
            ;;
    esac
    
    # Salvar em log file
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    log_action "INFO" "Verificando depend√™ncias e scripts..."
    
    local scripts=(
        "$SCRIPTS_DIR/validate_docs.sh"
        "$SCRIPTS_DIR/metrics_dashboard.sh"
        "$SCRIPTS_DIR/auto_version.sh"
    )
    
    local missing_scripts=()
    
    for script in "${scripts[@]}"; do
        if [[ ! -f "$script" ]]; then
            missing_scripts+=("$script")
        elif [[ ! -x "$script" ]]; then
            chmod +x "$script"
            log_action "INFO" "Permiss√£o de execu√ß√£o adicionada: $script"
        fi
    done
    
    if [[ ${#missing_scripts[@]} -gt 0 ]]; then
        log_action "ERROR" "Scripts faltando: ${missing_scripts[*]}"
        return 1
    fi
    
    log_action "SUCCESS" "Todas as depend√™ncias verificadas"
    return 0
}

# Fun√ß√£o para executar valida√ß√£o da documenta√ß√£o
run_validation() {
    if [[ "$VALIDATE_DOCS" == true ]]; then
        log_action "INFO" "Executando valida√ß√£o da documenta√ß√£o..."
        
        if "$SCRIPTS_DIR/validate_docs.sh" > /dev/null 2>&1; then
            log_action "SUCCESS" "Valida√ß√£o conclu√≠da com sucesso"
            return 0
        else
            log_action "WARNING" "Valida√ß√£o encontrou problemas (verifique relat√≥rio)"
            return 1
        fi
    else
        log_action "INFO" "Valida√ß√£o pulada (flag desabilitada)"
        return 0
    fi
}

# Fun√ß√£o para atualizar m√©tricas e dashboard
update_metrics_dashboard() {
    if [[ "$UPDATE_METRICS" == true ]]; then
        log_action "INFO" "Atualizando m√©tricas e dashboard..."
        
        if "$SCRIPTS_DIR/metrics_dashboard.sh" > /dev/null 2>&1; then
            log_action "SUCCESS" "Dashboard de m√©tricas atualizado"
            return 0
        else
            log_action "ERROR" "Falha ao atualizar dashboard de m√©tricas"
            return 1
        fi
    else
        log_action "INFO" "Atualiza√ß√£o de m√©tricas pulada (flag desabilitada)"
        return 0
    fi
}

# Fun√ß√£o para versionamento autom√°tico (apenas se solicitado)
run_auto_versioning() {
    if [[ "$AUTO_VERSION" == true ]]; then
        log_action "INFO" "Executando versionamento autom√°tico..."
        
        # Verificar se h√° mudan√ßas significativas
        if git diff --cached --quiet -- "$DOCS_DIR" 2>/dev/null; then
            log_action "INFO" "Nenhuma mudan√ßa detectada, pulando versionamento"
            return 0
        fi
        
        if echo "y" | "$SCRIPTS_DIR/auto_version.sh" auto > /dev/null 2>&1; then
            log_action "SUCCESS" "Versionamento autom√°tico conclu√≠do"
            return 0
        else
            log_action "WARNING" "Versionamento n√£o executado (pode ser normal)"
            return 1
        fi
    else
        log_action "INFO" "Versionamento autom√°tico pulado (flag desabilitada)"
        return 0
    fi
}

# Fun√ß√£o para gerar relat√≥rios consolidados
generate_reports() {
    if [[ "$GENERATE_REPORTS" == true ]]; then
        log_action "INFO" "Gerando relat√≥rios consolidados..."
        
        local report_file="$DOCS_DIR/project-management/automation-report-$(date +%Y%m%d-%H%M%S).md"
        
        cat > "$report_file" << EOF
# ü§ñ **Relat√≥rio de Automa√ß√£o da Documenta√ß√£o**

**Data:** $(date '+%d/%m/%Y %H:%M:%S')  
**Vers√£o:** $(cat "$DOCS_DIR/VERSION" 2>/dev/null || echo "1.0.0")  
**Executado por:** Automa√ß√£o do Sistema  

---

## üìä **Resumo da Execu√ß√£o**

### ‚úÖ **Tarefas Executadas**
$(if [[ "$VALIDATE_DOCS" == true ]]; then echo "- üîç Valida√ß√£o da documenta√ß√£o"; fi)
$(if [[ "$UPDATE_METRICS" == true ]]; then echo "- üìä Atualiza√ß√£o de m√©tricas e dashboard"; fi)
$(if [[ "$AUTO_VERSION" == true ]]; then echo "- üìã Versionamento autom√°tico"; fi)
$(if [[ "$GENERATE_REPORTS" == true ]]; then echo "- üìù Gera√ß√£o de relat√≥rios"; fi)
$(if [[ "$CLEAN_TEMP" == true ]]; then echo "- üßπ Limpeza de arquivos tempor√°rios"; fi)

### üìà **M√©tricas Atuais**
$(if [[ -f "$DOCS_DIR/project-management/docs-metrics.json" ]]; then
    local quality_score=$(jq -r '.validation.qualityScore // "N/A"' "$DOCS_DIR/project-management/docs-metrics.json")
    local broken_links=$(jq -r '.validation.brokenLinks // "N/A"' "$DOCS_DIR/project-management/docs-metrics.json")
    echo "- **Score de Qualidade:** $quality_score%"
    echo "- **Links Quebrados:** $broken_links"
    echo "- **Status:** $(jq -r '.status // "N/A"' "$DOCS_DIR/project-management/docs-metrics.json")"
else
    echo "- **M√©tricas:** Execute valida√ß√£o para obter dados atuais"
fi)

### üéØ **Status dos Componentes**
$(check_component_status)

---

## üîó **Links √öteis**

- üìä **[Dashboard de M√©tricas](metrics/quality-dashboard.md)** - Qualidade atual
- üìã **[Status do Projeto](project-management/status.md)** - Progresso geral  
- üè† **[Documenta√ß√£o Principal](README.md)** - P√°gina inicial

---

## ‚è∞ **Pr√≥xima Execu√ß√£o**

**Recomendada:** $(date -d '+7 days' '+%d/%m/%Y')  
**Comando:** \`scripts/docs/docs_automation.sh --auto\`

---

*Relat√≥rio gerado automaticamente pelo Sistema de Automa√ß√£o*
EOF

        log_action "SUCCESS" "Relat√≥rio gerado: $report_file"
        return 0
    else
        log_action "INFO" "Gera√ß√£o de relat√≥rios pulada (flag desabilitada)"
        return 0
    fi
}

# Fun√ß√£o para verificar status dos componentes
check_component_status() {
    local components=(
        "README.md:Documenta√ß√£o principal"
        "user-guide/:Guia do usu√°rio"
        "developer-guide/:Guia do desenvolvedor"
        "operations/:Documenta√ß√£o operacional"
        "templates/:Templates de documenta√ß√£o"
    )
    
    for component in "${components[@]}"; do
        local path="${component%%:*}"
        local name="${component##*:}"
        
        if [[ -e "$DOCS_DIR/$path" ]]; then
            echo "- ‚úÖ **$name:** OK"
        else
            echo "- ‚ùå **$name:** Ausente"
        fi
    done
}

# Fun√ß√£o para limpeza de arquivos tempor√°rios
clean_temporary_files() {
    if [[ "$CLEAN_TEMP" == true ]]; then
        log_action "INFO" "Limpando arquivos tempor√°rios..."
        
        # Encontrar e remover arquivos tempor√°rios
        local temp_files_found=0
        
        # Limpar arquivos .bak
        find "$DOCS_DIR" -name "*.bak" -type f -delete 2>/dev/null && temp_files_found=$((temp_files_found + 1)) || true
        
        # Limpar arquivos .tmp
        find "$DOCS_DIR" -name "*.tmp" -type f -delete 2>/dev/null && temp_files_found=$((temp_files_found + 1)) || true
        
        # Limpar diret√≥rios vazios (exceto archived)
        find "$DOCS_DIR" -type d -empty ! -path "*/archived/*" -delete 2>/dev/null || true
        
        log_action "SUCCESS" "Limpeza conclu√≠da ($temp_files_found arquivos tempor√°rios removidos)"
        return 0
    else
        log_action "INFO" "Limpeza de arquivos tempor√°rios pulada (flag desabilitada)"
        return 0
    fi
}

# Fun√ß√£o para gerar notifica√ß√µes/alertas
generate_notifications() {
    if [[ "$SEND_NOTIFICATIONS" == true ]]; then
        log_action "INFO" "Gerando notifica√ß√µes e alertas..."
        
        local alerts=()
        local timestamp=$(date -Iseconds)
        
        # Verificar se h√° problemas cr√≠ticos
        if [[ -f "$DOCS_DIR/project-management/docs-metrics.json" ]]; then
            local broken_links=$(jq -r '.validation.brokenLinks // 0' "$DOCS_DIR/project-management/docs-metrics.json")
            local missing_files=$(jq -r '.validation.missingFiles // 0' "$DOCS_DIR/project-management/docs-metrics.json")
            local quality_score=$(jq -r '.validation.qualityScore // 85' "$DOCS_DIR/project-management/docs-metrics.json")
            
            if [[ $broken_links -gt 0 ]]; then
                alerts+=("CR√çTICO: $broken_links links quebrados encontrados")
            fi
            
            if [[ $missing_files -gt 5 ]]; then
                alerts+=("ATEN√á√ÉO: $missing_files arquivos importantes ausentes")
            fi
            
            if [[ $quality_score -lt 70 ]]; then
                alerts+=("QUALIDADE: Score baixo de $quality_score% (meta: 95%)")
            fi
        fi
        
        # Gerar arquivo de notifica√ß√µes
        local notification_data=$(cat << EOF
{
  "timestamp": "$timestamp",
  "date": "$(date '+%Y-%m-%d')",
  "time": "$(date '+%H:%M:%S')",
  "automation_run": {
    "status": "completed",
    "tasks_executed": [
      $(if [[ "$VALIDATE_DOCS" == true ]]; then echo "\"validation\""; fi)
      $(if [[ "$UPDATE_METRICS" == true ]]; then echo ", \"metrics\""; fi)
      $(if [[ "$AUTO_VERSION" == true ]]; then echo ", \"versioning\""; fi)
      $(if [[ "$GENERATE_REPORTS" == true ]]; then echo ", \"reports\""; fi)
    ],
    "alerts": [
      $(printf '"%s",' "${alerts[@]}" | sed 's/,$//')
    ],
    "next_run_recommended": "$(date -d '+7 days' -Iseconds)"
  }
}
EOF
)
        
        echo "$notification_data" > "$NOTIFICATION_FILE"
        
        if [[ ${#alerts[@]} -gt 0 ]]; then
            log_action "WARNING" "${#alerts[@]} alertas gerados (verifique $NOTIFICATION_FILE)"
        else
            log_action "SUCCESS" "Nenhum alerta - sistema funcionando bem"
        fi
        
        return 0
    else
        log_action "INFO" "Gera√ß√£o de notifica√ß√µes pulada (flag desabilitada)"
        return 0
    fi
}

# Fun√ß√£o para inicializar log
initialize_log() {
    mkdir -p "$(dirname "$LOG_FILE")"
    
    cat > "$LOG_FILE" << EOF
# üìã **Log de Automa√ß√£o da Documenta√ß√£o**

**In√≠cio da Execu√ß√£o:** $(date '+%d/%m/%Y %H:%M:%S')  
**Vers√£o:** $(cat "$DOCS_DIR/VERSION" 2>/dev/null || echo "1.0.0")  
**Sistema:** $(uname -s)  
**Usu√°rio:** $(whoami)  

---

## üìä **Log de Atividades**

EOF
}

# Fun√ß√£o para finalizar execu√ß√£o
finalize_execution() {
    local total_errors="$1"
    local total_warnings="$2"
    
    # Adicionar resumo ao log
    cat >> "$LOG_FILE" << EOF

---

## üìä **Resumo da Execu√ß√£o**

**Finalizado em:** $(date '+%d/%m/%Y %H:%M:%S')  
**Dura√ß√£o:** $SECONDS segundos  
**Erros:** $total_errors  
**Avisos:** $total_warnings  
**Status:** $(if [[ $total_errors -eq 0 ]]; then echo "‚úÖ Sucesso"; else echo "‚ö†Ô∏è Com problemas"; fi)

### üîó **Arquivos Gerados**
- üìä Dashboard: docs/metrics/quality-dashboard.md
- üìã M√©tricas: docs/project-management/docs-metrics.json  
- üîî Notifica√ß√µes: docs/project-management/automation-alerts.json

### ‚è∞ **Pr√≥xima Execu√ß√£o Recomendada**
$(date -d '+7 days' '+%d/%m/%Y')

---

*Automa√ß√£o conclu√≠da com $(if [[ $total_errors -eq 0 ]]; then echo "sucesso"; else echo "$total_errors problema(s)"; fi)*
EOF

    echo ""
    echo -e "${BLUE}üìä RESUMO FINAL${NC}"
    echo "================================================================="
    echo -e "‚è±Ô∏è  Dura√ß√£o: ${YELLOW}${SECONDS}s${NC}"
    echo -e "‚ùå Erros: ${YELLOW}$total_errors${NC}"
    echo -e "‚ö†Ô∏è  Avisos: ${YELLOW}$total_warnings${NC}"
    echo -e "üìã Log completo: ${CYAN}$LOG_FILE${NC}"
    
    if [[ $total_errors -eq 0 ]]; then
        echo -e "${GREEN}üéâ Automa√ß√£o conclu√≠da com sucesso!${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Automa√ß√£o conclu√≠da com $total_errors problema(s)${NC}"
        return 1
    fi
}

# Fun√ß√£o principal
main() {
    local mode="${1:-full}"
    local errors=0
    local warnings=0
    
    # Configurar flags baseado no modo
    case "$mode" in
        "quick")
            AUTO_VERSION=false
            GENERATE_REPORTS=false
            ;;
        "validate-only")
            UPDATE_METRICS=false
            AUTO_VERSION=false
            GENERATE_REPORTS=false
            CLEAN_TEMP=false
            ;;
        "metrics-only")
            VALIDATE_DOCS=false
            AUTO_VERSION=false
            GENERATE_REPORTS=false
            ;;
        "version")
            AUTO_VERSION=true
            ;;
        "full"|"auto")
            # Usar configura√ß√µes padr√£o
            ;;
    esac
    
    # Inicializar
    initialize_log
    log_action "INFO" "Iniciando automa√ß√£o da documenta√ß√£o (modo: $mode)"
    
    # Verificar depend√™ncias
    if ! check_dependencies; then
        ((errors++))
        log_action "ERROR" "Falha na verifica√ß√£o de depend√™ncias"
        finalize_execution $errors $warnings
        return 1
    fi
    
    # Executar tarefas
    echo -e "${BLUE}üöÄ Executando tarefas de automa√ß√£o...${NC}"
    echo ""
    
    # 1. Valida√ß√£o
    if ! run_validation; then
        ((warnings++))
    fi
    
    # 2. M√©tricas e Dashboard
    if ! update_metrics_dashboard; then
        ((errors++))
    fi
    
    # 3. Versionamento (se solicitado)
    if ! run_auto_versioning; then
        ((warnings++))
    fi
    
    # 4. Relat√≥rios
    if ! generate_reports; then
        ((warnings++))
    fi
    
    # 5. Limpeza
    if ! clean_temporary_files; then
        ((warnings++))
    fi
    
    # 6. Notifica√ß√µes
    if ! generate_notifications; then
        ((warnings++))
    fi
    
    # Finalizar
    finalize_execution $errors $warnings
}

# Fun√ß√£o para ajuda
show_help() {
    cat << EOF
ü§ñ **Sistema de Automa√ß√£o da Documenta√ß√£o**

USO:
    $0 [MODO]

MODOS:
    full             Execu√ß√£o completa (padr√£o)
    auto             Alias para 'full' (para uso em cron)
    quick            Execu√ß√£o r√°pida (sem versionamento/relat√≥rios)
    validate-only    Apenas valida√ß√£o da documenta√ß√£o
    metrics-only     Apenas atualiza√ß√£o de m√©tricas
    version          For√ßar versionamento autom√°tico

FUNCIONALIDADES:
    üîç Valida√ß√£o autom√°tica da documenta√ß√£o
    üìä Atualiza√ß√£o de m√©tricas e dashboard
    üìã Versionamento autom√°tico (quando apropriado)
    üìù Gera√ß√£o de relat√≥rios consolidados
    üßπ Limpeza de arquivos tempor√°rios
    üîî Sistema de notifica√ß√µes e alertas

EXEMPLOS:
    $0                    # Execu√ß√£o completa
    $0 quick              # Execu√ß√£o r√°pida  
    $0 validate-only      # Apenas valida√ß√£o
    $0 metrics-only       # Apenas m√©tricas

AUTOMA√á√ÉO:
    # Adicionar ao crontab para execu√ß√£o semanal:
    0 8 * * 1 /path/to/scripts/docs/docs_automation.sh auto

ARQUIVOS GERADOS:
    - docs/project-management/automation-log.md
    - docs/project-management/automation-alerts.json
    - docs/metrics/quality-dashboard.md
    - docs/project-management/docs-metrics.json

EOF
}

# Processamento de argumentos
case "${1:-full}" in
    -h|--help)
        show_help
        ;;
    full|auto|quick|validate-only|metrics-only|version)
        main "$1"
        ;;
    *)
        echo -e "${RED}‚ùå Modo inv√°lido: $1${NC}"
        echo -e "${YELLOW}   Use -h para ajuda${NC}"
        exit 1
        ;;
esac 